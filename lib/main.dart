import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:go_router/go_router.dart';
import 'firebase_options.dart'; // Ensure this is generated by flutterfire configure
import 'injection_container.dart' as di; // Global DI setup
import 'features/auth/presentation/bloc/auth_bloc.dart';
import 'core/routes/app_router.dart'; // Our GoRouter setup

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );
  await di.init(); // Initialize all GetIt dependencies
  runApp(const MyApp());
}

class MyApp extends StatefulWidget {
  const MyApp({super.key});

  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  late final AuthBloc _authBloc;
  late final GoRouter _router;

  @override
  void initState() {
    super.initState();
    _authBloc = di.sl<AuthBloc>();
    _router = AppRouter.router(authBloc: _authBloc); // Initialize GoRouter with AuthBloc
  }

  @override
  void dispose() {
    _authBloc.close(); // Dispose of the BLoC
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return BlocProvider<AuthBloc>.value(
      value: _authBloc, // Provide the AuthBloc to the widget tree
      child: MaterialApp.router(
        title: 'Social App',
        theme: ThemeData(
          primarySwatch: Colors.blue,
        ),
        routerConfig: _router, // Assign the GoRouter config
      ),
    );
  }
}